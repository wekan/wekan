name: Deploy testing environment to EC2

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      wekan_image_tag: ${{ steps.docker_image_build.outputs.tag }}

    steps:
      - name: Checkout repository(omriza5/wekan)
        uses: actions/checkout@v4

      - name: Build and push docker image
        id: docker_image_build
        run: |
          # Login to DockerHub
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

          # Use short commit SHA (first 7 characters)
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          TAG="${SHORT_SHA}-$(date +%Y%m%d-%H%M%S)"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/wekan:$TAG .

          docker push ${{ secrets.DOCKERHUB_USERNAME }}/wekan:$TAG

          # Save the tag for later steps
          echo "WEKAN_IMAGE_TAG=$TAG" >> $GITHUB_ENV

      - name: Create .env file
        run: |
          echo "WEKAN_IMAGE=omriza5/wekan:${WEKAN_IMAGE_TAG}" >> .env

      - name: Copy .env file to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.WEKAN_EC2_HOST_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ".env"
          target: "/home/ubuntu/"

      - name: Copy docker-compose file to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.WEKAN_EC2_HOST_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: "/home/ubuntu/"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.WEKAN_EC2_HOST_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Stop and remove containers with volumes
            sudo docker compose down -v || true

            # Clean up everything including named volumes
            sudo docker volume rm $(sudo docker volume ls -q) 2>/dev/null || true

            sudo docker stop $(sudo docker ps -aq) 2>/dev/null || true
            sudo docker rm $(sudo docker ps -aq) 2>/dev/null || true

            # Remove all images to free space
            sudo docker rmi $(sudo docker images -q) 2>/dev/null || true

            # Clean up networks (volumes already removed above)
            sudo docker network prune -f || true

            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            sudo docker compose pull
            sudo docker compose up -d

  API-tests:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # NEW STEP: Create test user
      - name: Create test user
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.WEKAN_EC2_HOST_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Wait for Wekan to be fully ready
            echo "‚è≥ Waiting for Wekan to start..."
            for i in {1..24}; do
              if curl -s http://localhost > /dev/null 2>&1; then
                echo "‚úÖ Wekan is responding!"
                break
              fi
              echo "Waiting... (attempt $i/24)"
              sleep 5
            done

            # Enable registration in database
            echo "üîß Enabling user registration..."
            sudo docker exec wekan-db mongosh wekan --eval 'db.settings.update({}, {$set: {"disableRegistration": false}}, {upsert: true})' || echo "Failed to enable registration"

            # Wait for setting to take effect
            sleep 5

            # Create user via API
            echo "üë§ Creating test user..."
            RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
                           -X POST http://localhost/users/register \
                           -H 'Content-Type: application/x-www-form-urlencoded' \
                           -H 'Accept: */*' \
                           -d 'username=omriza5&password=123456&email=omriza5@gmail.com')

            # Parse response
            HTTP_CODE=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS:.*//g')

            # Check result
            if [[ "$HTTP_CODE" == "200" || "$HTTP_CODE" == "201" ]]; then
              echo "‚úÖ Test user created successfully"
            else
              echo "‚ùå User creation failed. HTTP Code: $HTTP_CODE"
              echo "Response: $BODY"

              # Fallback: Check if user exists in database
              echo "üîç Checking if user exists in database..."
              sudo docker exec wekan-db mongosh wekan --eval 'db.users.findOne({username: "omriza5"})' && echo "User found in database" || echo "User not found"
            fi

      - name: Run API tests
        env:
          BASE_URL: ${{ secrets.WEKAN_URL }}
        run: |
          pytest --maxfail=5 --disable-warnings -v

